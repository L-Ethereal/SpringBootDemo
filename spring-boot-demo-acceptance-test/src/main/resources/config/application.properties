########################################################################################################################
# gRPC 配置
########################################################################################################################
# 本地测试地址
grpc.server.demo.name: 127.0.0.1
#默认端口9090
grpc.server.demo.port: 7052

#您需要通过在属性键之后添加冒号（:)后跟默认值来修改表达式。
#@Value("${sbpg.init.welcome-message:Hello world}")

#多行字符串属性
#如果您有很长的属性值，可以考虑将其分成几行以提高可读性。使用反斜杠字符断开application.properties文件中的行。
#sbpg.init.welcome-message=Hi there! This value is pretty long \
# and that is why I decided to \
# break it into multiple lines

#属性为数组，列表或集合
#应用程序中的某些属性可能会定义值集合。在这种情况下，为您的所需属性键指定由逗号分隔的值列表。
#sbpg.init.numbers=0,1,1,2,3,5,8
#Spring再次为您做转换。只需将属性注入数组变量即可。
#InitService(@Value("${sbpg.init.numbers}") int[] numbers) {
#   // ...
#}

#列表属性的自定义分隔符
#默认情况下，Spring使用逗号分割您的属性。没有办法逃避逗号。如果你想要一个像分号这样的分隔符，你该怎么办？
#sbpg.init.numbers=0;1;1;2;3;5;8
#幸运的是，您可以使用不同的分隔符自行拆分属性。你需要的只是一个简单的表达。
#InitService(@Value("#{'${sbpg.init.numbers}'.split(';')}")
#            List<Integer> numbers) {
#   // ...
#}

#属性为hashmap
#注入map比数组和列表更棘手。让我们从您应该在application.properties文件中使用的值的格式开始。
#sbpg.init.number-map={KEY1:1, KEY2:2, KEY3:3}
#,map几乎看起来像JSON。唯一的区别是不需要引号。如果您愿意，可以将键和值包装为引号。Spring会为你打开它们。
#最后一步是使用@Value注释注入属性。为此，请将属性占位符放在表达式中。如果没有表达式，Spring将抛出IllegalStateException。
#InitService(@Value("#{${sbpg.init.number-map}}")
#            Map<String, Integer> numberMap) {
#   // ...
#}